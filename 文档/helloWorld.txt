?opensessioninview原理 为什么配置在struts2之前 
?hibernate lazy加载配置
?ActionContextCleanUp配置顺序
1、过滤器原理： try{chain.doFilter(req, res);// Filter 只是链式处理，请求依然转发到目的地址。}
		跳转至页面；
		后续代码执行、




1、HR人力资源管理系统 resin+struts2+Hibernate+Spring+sqlserver
项目用到的技术：
	1、页面布局引入FRAME框架页，分为标题栏，菜单导航栏，主页面显示，采用原生document开发。主要效果，用户登录时，查询此用户关联角色的所有功能信息，在菜单导航栏显示其父目录及其所有子目录功能模块(默认子目录功能隐藏)，父目录标签添加OnClick事件，显示子目录功能。js控制页面form表单提交，将服务器返回结果在页面显示，自定义分页组件PageBean，实现分页查询、显示功能，与服务器异步交互采用ajax和DWR框架。
	2、项目采用ehcache缓存常用数据字典等公司、部门查询显示。
	3、本项目主要负责的工作模块工资核算体系包含客户部职级计算、考勤模块设计开发、SFA绩效、优秀科代奖金等模块。主要统计各系统数据、存储过程处理业务。



2、mis智达合同管理系统 tomcat6+struts+hibernate+spring
	1、mis系统为公司合同管理系统，主要分为三个系统，供不同分公司使用。三系统数据共享、分布式事物控制。
	2、系统签订合同控制、网站下单控制，为平台开通提供接口数据。
	2、主要开发的工作为查询统计、根据各系统签单、到账、产品服务期限统计财务报表数据。
	3、POI技术实现查询结果自动化生成excle表格。


3、CRM客户关系管理系统 tomcat6+struts2+Hibernate+Spring+sqlserver
	1、铭万智达系统录入合同添加附件功能，引入swfupload组件，搭建Apache图片服务器、建立图片上传项目。
	2、自定义拦截器进行系统权限拦截登陆控制。
	3、客服对合同的审核、调用智达系统webservice，显示合同产品信息，特批单信息，抵充合同信息，对客户合同进行	审核，通过客服、合同管理员、销售管理部等审批通过、确认客户关怀。
	4、客户产品到期预警，采用添加系统监听器，配置listener，编写定时器定时将mysql中智能网站6.0数据添加至sqlserver中，模块根据条件查询最近即将到期的客户信息，客服人员进行客户维护。
	5、CRM客户扩展数据使用lucene建立全文索引库提供模糊查询功能，进行高亮显示。
2、ac、am铭万代理平台系统
apache tomcat服务器负载均衡。 Apache+tomcat6+struts2+Hibernate+Spring+sqlserver
	1、项目由铭万代理商渠道使用，为避免服务器宕机或高并发访问效率低下问题，项目采用Apache2.2+Tomcat6.0负载均衡，session粘贴。
	3、页面布局引入SiteMesh框架、将网页的布局(铭万代理导航栏、菜单栏)及显示内容分离，从而达到页面结构共享。
建立装饰页面，原生态document开发、根据登陆用户关联角色所有功能信息，在菜单栏显示其所有功能模块。被装饰页面由js控制form表单提交、自定义struts2标签回显数据。
	2、项目采用前台代理商使用与后台管理分离的模式，后台主要有公司客服控制人员权限、添加产品、添加技术分类、退订单、代理商充值等功能；前台代理商主要用于购买公司平台产品，购买验证与生成订单皆调由webservice接口推送数据。
	4、本项目主要负责的工作模块金榜抢注、微宝系列产品的购买等，调用平台接口推送数据、保存生成的订单。

4、dai金融项目 tomcat+springMVC+mybatis+spring+shiro(jeesite框架生成)
	1、本项目由jeesite框架改变、修改主页跳转、用户注册、分为公司客服及铭万代理商，前台为代理商申请贷款功能、
后台为客服审核推送数据至宜信商贷公司。
	2、数据传输采用的编码格式及加密算法。

5、网站下单管理系统 tomcat6+struts2+Hibernate+Spring+sqlserver

	1、网站下单管理模块，主要功能是客服下单、经过设计部、销售管理部层层审批，并将单子分配给设计师制作，最终于客服沟通确认网站制作完成的工作，首先采用DWR框架发送异步请求，调用智达系统的webservice,判断此单子是否可以正常下单，下单后，设计部经理经过审批将单子分配给设计师，与客服进行沟通开始制作，最终客服确认通过，上传确认书，单子制作完成。


6、制版中心生产管理系统 Jquery EasyUI + Struts2 + Spring + Hibernate + JBPM4.4 + lucene + hibernate search索引

	1、使用easyui框架进行主页布局、实现折叠菜单功能、选项卡布局以及jquery的ztree插件制作树形菜单等。主要效果点击菜单上节点，添加选项卡、easyui datagrid根据当前登录用户关联的角色所具有的角色信息动态生成页面、页面中添加隐藏windows、 通过ajax或easyui的form表单（采用easyui的form表单验证效果实现前台效验）的提交跟服务器进行异步交互。设计通用设计分页组件，结合easyui datagrid表格技术实现分页查询、组合条件查询。
	5、项目使用JBPM控制业务流程，流程定义模块，发布流程描述文件，实现流程实例运行监控。开票人员进行工作单的录入，像数据库表中添加工作单数据。扫面人员查询数据库表中未审核的工作单数据进行核对，通过审核，启动业务流程实例（同时将生产info关联到流程实例上，生产info记录工作单信息以及各流程业务办理的信息记录、时间及责任人），流程从生产制作开始。生产组各人员查看组任务，通过开工操作进行任务的拾取，通过完工操作以提交表单的方式实现业务流程流转。生产部管理员进行人员的添加、角色功能权限管理操作。查询所有工作单（以及各工作单制作、校对、质检详细信息） 、根据书名进行模糊查询（lucene索引库）、查询每月所有生产组各人员的产量统计等操作。
6、三希堂公司图书管理
	1、图书购买

1、会员注册及多线程发送邮箱验证。
2、在线支付功能。









1、struts2+Hibernate+Spring :项目
web.xml配置：
<filter>  
        <filter-name>openSessionInView</filter-name>  
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>  
</filter>  
<filter-mapping>  
        <filter-name>openSessionInView</filter-name>  
        <url-pattern>/*</url-pattern>  
</filter-mapping> 
<context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
</context-param>
<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
<filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
</filter>

<filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>*.html</url-pattern>
</filter-mapping>

2、struts+hibernate+spring
web.xml配置：
<!-- openSessionInView 要配置在struts2的FilterDispatcher之前-->  
<filter>  
        <filter-name>openSessionInView</filter-name>  
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>  
</filter>  
<filter-mapping>  
        <filter-name>openSessionInView</filter-name>  
        <url-pattern>/*</url-pattern>  
</filter-mapping> 

<listener>          
  	<listener-class>     
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>           
</listener>
<servlet>        
    <servlet-name>action</servlet-name>
    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
    <init-param>
      <param-name>config</param-name>
      <param-value>/WEB-INF/struts-config.xml</param-value>
    </init-param>
    <init-param>    
      <param-name>debug</param-name>
      <param-value>3</param-value>
    </init-param>
    <init-param>
      <param-name>detail</param-name>
      <param-value>3</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
</servlet> 
applicationContext.xml配置：
配置数据源、事务控制、service层、dao层
struts-config.xml配置：
标示<action
		name="LadderAccountForm" 
		path="/LadderAccountAction"
		scope="request"
		validate="false"
		parameter="method"
		type="org.springframework.web.struts.DelegatingActionProxy">
		<forward name="LadderSearchPage" path="/jsp/admin/gzhs/LadderList.jsp"></forward>
		<forward name="LadderAddSavePage" redirect="true" path="/LadderAccountAction.xml?method=searchBase" />
		</action>由springDelegatingActionProxy代理类生成
添加spring插件
<plug-in className="org.springframework.web.struts.ContextLoaderPlugIn">
		<set-property property="contextConfigLocation" value="/WEB-INF/actionContext.xml" />
</plug-in>
actionContext.xml配置
主要配置action
<bean name="/LadderAccountAction" class="com.powerapps.action.gzhs.LadderAccountAction" singleton="false">
3、ssh的web.xml配置(sitemesh框架+ActionContextCleanUp)：
filter配置顺序：
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
 
	<filter>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>struts-cleanup</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts-cleanup</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<filter>
		<filter-name>struts</filter-name>
		<filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
