?opensessioninview原理 为什么配置在struts2之前 
?hibernate lazy加载配置
?ActionContextCleanUp配置顺序
1、过滤器原理： try{chain.doFilter(req, res);// Filter 只是链式处理，请求依然转发到目的地址。}
		跳转至页面；
		后续代码执行、




1、HR resin服务器 ehcache缓存字典。 resin+struts2+Hibernate+Spring+sqlserver
项目用到的技术：
	1、页面布局引入FRAME框架页，分为标题栏，菜单导航栏，主页面显示，采用原生document开发。主要效果，用户登录时，查询此用户关联角色的所有功能信息，在菜单导航栏显示其父目录及其所有子目录功能模块(默认子目录功能隐藏)，父目录标签添加OnClick事件，显示子目录功能。js控制页面form表单提交，将服务器返回结果在页面显示，自定义分页组件PageBean，实现分页查询、显示功能，与服务器异步交互采用ajax和DWR框架。
	2、项目采用ehcache缓存常用数据字典等公司、部门查询显示。
	3、










2、ac、am apache tomcat服务器负载均衡。 Apache+tomcat+struts2+Hibernate+Spring+sqlserver
	1、项目由铭万代理商渠道使用，为避免服务器宕机或高并发访问效率低下问题，项目采用Apache2.2+Tomcat6.0负载均衡，session沾贴。
	3、页面布局引入SiteMesh框架、将网页的布局(铭万代理导航栏、菜单栏)及显示内容分离，从而达到页面结构共享。
建立装饰页面，原生态document开发、根据登陆用户关联角色所有功能信息，在菜单栏显示其所有功能模块。被装饰页面由js控制form表单提交、自定义struts2标签回显数据。
	2、项目采用前台代理商使用与后台管理分离的模式，后台主要有公司客服控制人员权限、添加产品、。。。功能
前台代理商主要用于购买公司平台产品，购买验证与生成订单皆调由webservice接口推送数据。
	4、





3、mis 分布式事务 tomcat+struts+hibernate+spring
	1、mis系统为公司合同管理系统，主要分为三个系统，供不同分公司使用。三系统数据共享、


4、dai  tomcat    tomcat+springMVC+mybatis+spring+shiro(jeesite框架生成)

1、struts2+Hibernate+Spring :项目
web.xml配置：
<filter>  
        <filter-name>openSessionInView</filter-name>  
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>  
</filter>  
<filter-mapping>  
        <filter-name>openSessionInView</filter-name>  
        <url-pattern>/*</url-pattern>  
</filter-mapping> 
<context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
</context-param>
<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
<filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
</filter>

<filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>*.html</url-pattern>
</filter-mapping>

2、struts+hibernate+spring
web.xml配置：
<!-- openSessionInView 要配置在struts2的FilterDispatcher之前-->  
<filter>  
        <filter-name>openSessionInView</filter-name>  
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>  
</filter>  
<filter-mapping>  
        <filter-name>openSessionInView</filter-name>  
        <url-pattern>/*</url-pattern>  
</filter-mapping> 

<listener>          
  	<listener-class>     
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>           
</listener>
<servlet>        
    <servlet-name>action</servlet-name>
    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
    <init-param>
      <param-name>config</param-name>
      <param-value>/WEB-INF/struts-config.xml</param-value>
    </init-param>
    <init-param>    
      <param-name>debug</param-name>
      <param-value>3</param-value>
    </init-param>
    <init-param>
      <param-name>detail</param-name>
      <param-value>3</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
</servlet> 
applicationContext.xml配置：
配置数据源、事务控制、service层、dao层
struts-config.xml配置：
标示<action
		name="LadderAccountForm" 
		path="/LadderAccountAction"
		scope="request"
		validate="false"
		parameter="method"
		type="org.springframework.web.struts.DelegatingActionProxy">
		<forward name="LadderSearchPage" path="/jsp/admin/gzhs/LadderList.jsp"></forward>
		<forward name="LadderAddSavePage" redirect="true" path="/LadderAccountAction.xml?method=searchBase" />
		</action>由springDelegatingActionProxy代理类生成
添加spring插件
<plug-in className="org.springframework.web.struts.ContextLoaderPlugIn">
		<set-property property="contextConfigLocation" value="/WEB-INF/actionContext.xml" />
</plug-in>
actionContext.xml配置
主要配置action
<bean name="/LadderAccountAction" class="com.powerapps.action.gzhs.LadderAccountAction" singleton="false">
3、ssh的web.xml配置(sitemesh框架+ActionContextCleanUp)：
filter配置顺序：
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
 
	<filter>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>struts-cleanup</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts-cleanup</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<filter>
		<filter-name>struts</filter-name>
		<filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
